my.control=rpart.control(xval=0,cp=0.001+i*0.001,minsplit=1+j*5)
tree[,10*i+j+1]<-assign(paste0('tree',i,j),rpart(Outcome~.,data=train,method='class',control=my.control))
}
}
for(i in 0:9){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+i*0.001,minsplit=1+j*5)
assign(paste0('tree',i,j),rpart(Outcome~.,data=train,method='class',control=my.control))
}
}
data<-read.csv("C:/Users/user/Desktop/Goat/univ/4-1/데이터마이닝/hw/hw4/diabetes.csv")
#1
set.seed(2059)
nobs=nrow(data)
i=sample(1:nobs,round(nobs*0.5))
train=data[i,]
test=data[-i,]
nrow(train);nrow(test)
tree=c()
for(i in 0:9){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+i*0.001,minsplit=1+j*5)
assign(paste0('tree',i,j),rpart(Outcome~.,data=train,method='class',control=my.control))
}
}
length(tree)
View(tree99)
str(tree00)
view(data)
View(data)
table(data$Outcome)
summary(data$Outcome)
summary(data)
str(data)
for(i in 01:100){
prob[i]<-assign(paste0('prob',i),predict(paste0('tree',i),newdata=test,type='prob'))
roccurve[i]<-assign(paste('roccurve',i),roc(test$Outcome~prob[i][,2]))
}
predict(paste0('tree',00),newdata=test,type='prob')
predict(paste0('tree',11),newdata=test,type='prob')
predict(tree11,newdata=test,type='prob')
str(tree00)
predict(paste0('tree',i),newdata=test,type='prob')
predict(tree00,newdata=test,type='prob')
predict(as.data.frame(tree00),newdata=test,type='prob')
roc<-c()
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc[i,]<-roc(test$Outcome~prob[,2])
}
}
airoc(0)
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc[j+1,]<-roc(test$Outcome~prob[,2])
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc[j+1]<-roc(test$Outcome~prob[,2])
}
}
auroc(0)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
prob
roc(test$Outcome~prob[,2])
roc[1]<-roc(test$Outcome~prob[,2])
roc[1,]<-roc(test$Outcome~prob[,2])
roc[,1]<-roc(test$Outcome~prob[,2])
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(roc(test$Outcome~prob[,2]))
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(paste0('tree',x,j))
print(roc(test$Outcome~prob[,2]))
}
}
auroc(0)
for(i in 0:9){
auroc(i)
}
roc(test$Outcome~prob[,2])
roc(test$Outcome~prob[,2])
roc<-roc(test$Outcome~prob[,2])
roc[1]
roc[[1]]
roc
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc[j]<-roc(test$Outcome~prob[,2])
print(paste0('tree',x,j))
print(roc[j])
}
}
for(i in 0:9){
auroc(i)
}
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc<-roc(test$Outcome~prob[,2])
print(paste0('tree',x,j))
roc[j]
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc<-roc(test$Outcome~prob[,2])
print(paste0('tree',x,j))
prunt(roc[j])
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
roc<-roc(test$Outcome~prob[,2])
print(paste0('tree',x,j))
print(roc[j])
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(paste0('tree',x,j))
roc(test$Outcome~prob[,2])
}
}
auroc(0)
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(paste0('tree',x,j))
roc(test$Outcome~prob[,2])
}
}
for(i in 0:9){
auroc(i)
}
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(paste0('tree',x,j))
print(roc(test$Outcome~prob[,2]))
}
}
for(i in 0:9){
auroc(i)
}
plot(auroc(0))
auroc<-function(x){
for(j in 0:9){
my.control=rpart.control(xval=0,cp=0.001+x*0.001,minsplit=1+j*5)
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
print(paste0('tree',x,j))
print(roc(test$Outcome~prob[,2]))
plot(roc(test$Outcome~prob[,2]))
}
}
auroc(0)
cps<-seq(0.001,0.01, by=0.001)
cps
minsplits<-seq(1,46,by=5)
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=misnplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])
}
auci[i]<-aucj[i]
}
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])
}
auci[i]<-aucj[i]
}
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])
}
rbind(auci,aucj)
}
aucj<-c()
auci<-c()
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])
}
rbind(auci,aucj)
}
head(auci)
auci
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[1],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])
}
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[1],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
rbind(aucj,roc(test$Outcome~prob[,2]))
}
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[1],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj<-roc(test$Outcome~prob[,2])
}
aucj
my.control=rpart.control(xval=0,cp=cps[1],minsplit=minsplits[1])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj<-roc(test$Outcome~prob[,2])
aucj[1]<-roc(test$Outcome~prob[,2])
aucj[1,]<-roc(test$Outcome~prob[,2])
aucj[,1]<-roc(test$Outcome~prob[,2])
as.vector(roc(test$Outcome~prob[,2]))
aucj[1]<-as.vector(roc(test$Outcome~prob[,2]))
aucj[1,]<-as.vector(roc(test$Outcome~prob[,2]))
roccurve<-roc(test$Outcome~prob[,2])
aucj[1]<-roccurve$auc
aucj
aucj[1]<-roc(test$Outcome~prob[,2])$auc
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])$auc
}
rbind(auci,aucj)
}
head(auci)
for(i in 1:10){
for(j in 1:10){
my.control=rpart.control(xval=0,cp=cps[i],minsplit=minsplits[j])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucj[j]<-roc(test$Outcome~prob[,2])$auc
}
auci[i]<-aucj[1:10]
}
cps<-rep(seq(0.001,0.01, by=0.001),each=10)
cps
minsplits<-rep(seq(1,46,by=5),10)
minsplits
options<-rbind(cps,minsplits)
length(options)
options<-cbind(cps,minsplits)
length(options)
options
combs<-cbind(cps,minsplits)
length(combs)
nrows(combs)
nrow(combs)
aucs<-c()
for(i in 1:100){
my.control=r.part.control(xval=0,cp=combs[i,1],minsplit=combs[i,2])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucs[i]<-roc(test$Outcome~prob[,2])$auc
}
for(i in 1:100){
my.control=rpart.control(xval=0,cp=combs[i,1],minsplit=combs[i,2])
prob<-predict(rpart(Outcome~.,data=train,method='class',control=my.control),newdata=test,type='prob')
aucs[i]<-roc(test$Outcome~prob[,2])$auc
}
aucs
library(lattice)
wireframe(aucs~cps+minsplits)
wireframe(aucs~cps+minsplits, shade=T)
install.packages('plot3D')
library('plot3D')
persp(cps,minisplits,aucs)
persp(sort(-cps),sort(-minisplits),sort(-aucs)
persp(sort(-cps),sort(-minisplits),sort(-aucs)
)
persp(sort(-cps),sort(-minisplits),sort(-aucs))
persp(sort(cps,decreasing=T),sort(minisplits,decreasing=T),sort(aucs,decreasing=T))
persp(sort(cps),sort(minisplits),sort(aucs))
cps
cp<-seq(0.001,0.01, by=0.001)
minisplit<-seq(1,46,by=5)
cps<-rep(cp,each=10)
minsplits<-rep(minisplit,10)
wireframe(aucs~cp+minsplit, shade=T)
persp(cp,minisplit,aucs)
wireframe(aucs~cp+minsplit, shade=T)
minsplit<-seq(1,46,by=5)
minsplits<-rep(minsplit,10)
wireframe(aucs~cp+minsplit, shade=T)
minsplit
length(minsplit)
length(cps)
length(cp)
length(aucs)
wireframe(aucs~cp+minsplit, shade=T)
persp(cp,minsplit,aucs)
wireframe(aucs~cps+minsplits, shade=T)
persp(cps,minsplits,aucs)
persp(cp,minsplit,aucs)
persp(cp,minsplit,rbind(cps,mincplits,aucs))
persp(cp,minsplit,rbind(cps,minsplits,aucs))
wireframe(aucs~cps+minsplits, shade=T)
wireframe(aucs~cps+minsplits, shate=T)
wireframe(aucs~cps+minsplits, shate=T, shade=T)
wireframe(aucs~cps+minsplits, shate=T, light.source=c(10,0,10))
wireframe(aucs~cps+minsplits, shate=T, aspect=c(61/87,0.4)light.source=c(10,0,10))
wireframe(aucs~cps+minsplits, shate=T, aspect=c(61/87,0.4),light.source=c(10,0,10))
wireframe(aucs~cps+minsplits, shate=T, aspect=c(61/87,0.4),light.source=c(10,0,10))
wireframe(rbind(cps,minsplits,aucs), shate=T, aspect=c(61/87,0.4),light.source=c(10,0,10))
wireframe(rbind(combs,aucs), shate=T, aspect=c(61/87,0.4),light.source=c(10,0,10))
rbind(combs,aucs)
aucs
str(aucs0
str(aucs)
str(aucs)
cbind(combs,aucs)
wireframe(cbind(combs,aucs), shate=T, aspect=c(61/87,0.4),light.source=c(10,0,10))
persp(cp,minsplit,aucs)
wireframe(cbind(combs,aucs), shate=T,light.source=c(10,0,10))
wireframe(aucs~cps*minsplits, shate=T,light.source=c(10,0,10))
wireframe(aucs~cps+minsplits, shate=T,light.source=c(10,0,10))
wireframe(aucs~cps*minsplits, shate=T,light.source=c(10,0,10))
install.packages('rgl')
library(rgl)
persp3d(cp,minsplit,aus)
persp3d(cp,minsplit,aucs)
persp3d(cp,minsplit,aucs,col='green')
persp3d(cp,minsplit,aucs,col='lightgreen')
persp3d(cp,minsplit,aucs,col='grey')
wireframe(aucs~cps*minsplits, shate=T,light.source=c(10,0,10))
persply(cp,minsplit,aucs,col='grey')
plot_ly(cp,minsplit,aucs)
install.packages('plotly')
library(plotly)
plot_ly(cp,minsplit,aucs)
plot_ly(x=cp,y=minsplit,z=aucs)
plot_ly(x=cp,y=minsplit,z=aucs,type = 'surface')
plot_ly(x=cp,y=minsplit,z=aucs,type='surface')
plot_ly(x=cp,y=minsplit,z=aucs,type='surface')
plot_ly(x=cp,y=minsplit,z=aucs,type='surface')
persp3D(cps,minsplits,aucs)
persp(cps,minsplits,aucs)
persp(cp,minsplit,aucs)
aucsarray<-array(aucs,dim=c(10,10))
aucsarray
combs
rownames(aucsarray)<-minsplit
colnames(ausarray)<-cp
colnames(aucsarray)<-cp
aucsarray
persp(cp,minsplit,aucsarray)
summary(aucarray)
summary(aucsarray)
max(aucsarray)
which.max(aucsarray)
which(aucsarray==max(aucsarray),arr.ind=T)
wireframe(aucs~cps*minsplits, shate=T,light.source=c(10,0,10))
persp3d(cp,minsplit,aucs,col='grey')
persp(cp,minsplit,aucsarray)
persp(cp,minsplit,aucsarray,theta=5)
persp(cp,minsplit,aucsarray,theta=-50)
persp3d(cp,minsplit,aucs,col='grey')
wireframe(aucs~cps*minsplits, shate=T,light.source=c(10,0,10))
persp(cp,minsplit,aucsarray,theta=-50,)
persp(cp,minsplit,aucsarray,theta=-50,phi=20)
persp(cp,minsplit,aucsarray,theta=-50,phi=80)
persp(cp,minsplit,aucsarray,theta=-50,phi=50)
persp(cp,minsplit,aucsarray,theta=-50,phi=30)
persp(cp,minsplit,aucsarray,theta=-40,phi=30)
persp(cp,minsplit,aucsarray,theta=-45,phi=30)
persp(cp,minsplit,aucsarray,theta=-45,phi=35)
persp(cp,minsplit,aucsarray,theta=-45,phi=35, main='AUROC 3D Surface plot')
persp(cp,minsplit,aucsarray,theta=-45,phi=35,
border='black',facets=T, colkey=T,
bty='b2',ticktype='detailed',
main='AUROC 3D Surface plot')
persp3D(cp,minsplit,aucsarray,theta=-45,phi=35,
border='black',facets=T, colkey=T,
bty='b2',ticktype='detailed',
main='AUROC 3D Surface plot')
p=rbeta(1000,14.26,23.19)
est=mean(p^2)
se=sd(p^2)/sqrt(1000)
c(est,se)
data<-read.csv('C:/Users/user/Desktop/firstmodeldata.csv')
data<-read.csv('C:/Users/user/Desktop/firstmodeldata.csv')
data
View(data)
View(data)
colnames(data)
data[-c(1,6,13)]
data[-c(1,6,7,13,14,15,16,17,18,24,28,30,32,33,35:39)]
colnames(data[-c(1,6,7,13,14,15,16,17,18,24,28,30,32,33,35:39)])
data1<-data[-c(1,6,7,13,14,15,16,17,18,24,28,30,32,33,35:39)]
setwd("~/R/desaip")
library(shiny)
runExample("01_hello")
runApp('shining')
runApp('shiny_desaip')
getwd()
shiny::runApp()
getwd()
setwd('C:/Users/user/Documents/R/desaip/shiny_desaip')
getwd()
shiny::runApp()
getwd()
shiny:runApp()
library(shiny)
# Define server logic required to draw a histogram
function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
getwd()
shiny:runApp()
shiny::runApp()
shiny::runApp()
install.packages('shinydashboard')
library(shinydashboard)
ShinyApp(ui,server)
library(shinydashboard)
ShinyApp(ui,server)
library(shiny)
ShinyApp(ui,server)
library(shiny)
library(shinydashboard)
ShinyApp(ui,server)
shinyApp(ui,server)
shinyApp(ui,server)
getwd()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
source('ui_info.R',local=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('ui_info.R',local=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
