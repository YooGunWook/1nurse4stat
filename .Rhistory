names(data)
View(data)
View(data)
#중복제거
data<-data %>% distinct(c("name","st_day"))
#중복제거
data<-data[!duplicated(data$c("name","st_day")),]
#중복제거
data<-data[!duplicated(data[,c("name","st_day")]),]
View(data)
data$rank
table(data$rank)
View(data)
data %>% count(st_day)
a<-data %>% count(st_day)
View(a)
#######################GAON & JINI by yoogunwook ----------------------------------------------------------------------
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/최종.csv")
a<-data %>% count(st_day)
data$X1<-data$X1+1 # 0부터 시작되서 1더하기
names(data)[1]<-"id" #기본의 id만들기
names(data)
#data의 song의 id 만들기
table(duplicated(data[,c("name","artist")]))
only1<-data[which(!duplicated(data[,c("name","artist")])),] #duplicated_none
only1$song_id<-"song_id"
only1$song_id<-c(1:1447)
only1<-subset(only1,select=c("name","artist","song_id"))
data<-left_join(data,only1,by=c("name","artist"))
# rank --------------------------------------------------------------------
data$rank_g<-ifelse(data$rank==c(1:10),1,
ifelse(data$rank==c(11:20),2,
ifelse(data$rank==c(21:30),3,
ifelse(data$rank==c(31:40),4,
ifelse(data$rank==c(41:50),5,
ifelse(data$rank==c(51:60),6,
ifelse(data$rank==c(61:70),7,
ifelse(data$rank==c(71:80),8,
ifelse(data$rank==c(81:90),9,10)))))))))
# change to weeks variable ----------------------------------------------------
data<-data %>% separate(time,c("st_day","ed_day"),"~")
data$st_day<-ymd(data$st_day)
data$ed_day<-ymd(data$ed_day)
data<- data %>% group_by(year(st_day)) %>% group_by(month(st_day)) %>% group_by(day(st_day))
names(data)
names(data)[17]<-"year"
names(data)[18]<-"month"
names(data)[19]<-"day"
data$year<-substr(data$year,3,4)
data$month<-ifelse(str_count(data$month)==1,paste0(0,data$month),data$month)
data$wks<-week(data$st_day)#그해에 몇째주 인지?
data$week<-paste0(data$year,"_",data$wks) #In what weeks of the month?
# sex ---------------------------------------------------------------------
data$sex<- fct_recode(data$성별,male="남성",female="여성",mixed="혼성")
# production --------------------------------------------------------------정리안함
dim(addmargins(table(data$production)))
# distributor -------------------------------------------------------------정리안함
dim(addmargins(table(data$distributor)))
# genre -------------------------------------------------------------------
table(data$장르)
A<-str_split_fixed(data$장르,"/ ",n=2)
A<-data.frame(A)
names(A)[1]<-"song_type"
names(A)[2]<-"genre"
data<-bind_cols(data,A)
mode(data$song_type)
table(data$song_type)
data$song_type<-fct_recode(data$song_type,K_POP="가요 ",POP="POP ",POP="J-POP ",OST="OST ",Others="그외장르 ",Others="재즈 ")
data$song_type<-fct_relevel(data$song_type,c("K_POP","POP","OST","Others"))
addmargins(table(data$song_type))
addmargins(table(data$genre))
data$genre<-recode(data$genre,"'댄스'='Dance_etc';'락'='Dance_etc';'랩/힙합'='Dance_etc';'일렉트로니카'='Dance_etc';'캐롤'='Dance_etc';'트로트'='Dance_etc';
'발라드'='Balad_etc';'블루스/포크'='Balad_etc';'R&B/소울'='Balad_etc';'인디'='Balad_etc';'정통'='Balad_etc';
'드라마'='Others';'애니메이션/게임'='Others';'팝'='Others';'해외영화'='Others';'전체'='Others'")
str(data)
# runtime -----------------------------------------------------------------
data$runtime<-data$런타임
data$runtime<-substr(data$runtime,1,5)
data$runtime<-as.numeric(substr(data$runtime,1,2))*60+as.numeric(substr(data$runtime,4,5))
summary(data$runtime)
data$runtime_g<-as.factor(ifelse(data$runtime<201,"Short",
ifelse(data$runtime>=242,"Long","Middle")))
# active_type -------------------------------------------------------------
data$active<-factor(data$활동유형,levels=c("솔로","그룹","밴드","프로젝트","듀엣"),
labels=c("Solo","Group","Band","Project","Duet"))
table(data$active)
data$active_g<-as.factor(ifelse(data$active=="Solo","Solo","Non_solo"))
# 100위안에 6개월동안 몇주동안 진입? ----------------------------------------------------------
data$song_id<-factor(data$song_id)
a<-table(data$song_id)
A<-data.frame(a)
names(A)[1]<-"song_id"
names(A)[2]<-"top_freq"
ggplot(A,aes(x=top_freq))+
geom_histogram(fill="#F8766D",color="black",binwidth = 1)
summary(A$top_freq)
A$top_freq_g<-factor(ifelse(A$top_freq<4,"Low",
ifelse(A$top_freq>=14,"High","Middle")))
A$top_freq_g<-fct_relevel(A$top_freq_g,"High","Middle","Low")
data<-left_join(data,A,by="song_id")
basic<-data
save(basic, file="basic.RData")
a<-data %>% count(st_day)
View(a)
data$st_day
a<-data %>% count(st_day)
View(a)
b<-data %>% count(st_day)
View(b)
#######################GAON & JINI by yoogunwook ----------------------------------------------------------------------
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/최종.csv")
a<-data %>% count(date)
View(data)
a<-data %>% count(time)
View(a)
load("~/Desktop/dsproject/data/basic_gg_nv_dc_0510.RData")
a<-basic %>% count(time)
a<-basic %>% count(st_day)
View(a)
View(basic)
a<-basic %>% count(week)
View(a)
View(basic)
#########################basic+youtube by 강동원
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/youtube_merge_final.csv")
data$X1<-data$X1+1 # 0부터 시작되서 1더하기
names(data)[1]<-"id" #기본의 id만들기
names(data)
#중복제거
data<-data[!duplicated(data[,c("name","st_day")]),]
table(data$rank)
View(a)
View(data)
table(data$rank)
a<-data %>% count(st_day)
View(a)
#########################basic+youtube by 강동원
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/youtube_merge_final.csv")
data$X1<-data$X1+1 # 0부터 시작되서 1더하기
names(data)[1]<-"id" #기본의 id만들기
names(data)
#중복제거
data<-data[!duplicated(data[,c("name","st_day")]),]
table(data$rank)
#########################basic+youtube by 강동원
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/youtube_merge_final.csv")
data$X1<-data$X1+1 # 0부터 시작되서 1더하기
names(data)[1]<-"id" #기본의 id만들기
names(data)
#중복제거
data<-data[!duplicated(data[,c("name","st_day","rank")]),]
table(data$rank)
a<-data %>% count(st_day)
save(basic, file="basic_you_0512.RData")
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)[1]<-"st_day"
View(data)
names(data)
names(data)[1]<-"st_day"
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)
names(data)[1]<-"st_day"
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)[1]<-"st_day"
data$Sondia_1<-NULL
data$Sondia_1
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)[1]<-"st_day"
names(data)[105]<-"X1"
data$Sondia_1<-NULL
data$최진호_1<-NULL
data$문성욱_1<-NULL
data$창모_1<-NULL
data$방탄소년단_1<-NULL
data$슬기_1<-NULL
names(data)
data[434]
data[434]<-NULL
names(data)
View(data)
data$st_day<-ymd(data$st_day)
dim(table(basic$st_day))
dim(data)
#structure change
data<-gather(data,names(data)[2]:names(data)[331],key="artist",value="gg_score")
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)[1]<-"st_day"
names(data)[105]<-"X1"
data$Sondia_1<-NULL
data$최진호_1<-NULL
data$문성욱_1<-NULL
data$창모_1<-NULL
data$방탄소년단_1<-NULL
data$슬기_1<-NULL
data[434]<-NULL
names(data)
data$st_day<-ymd(data$st_day)
dim(table(basic$st_day))
dim(data)
#structure change
data<-gather(data,names(data)[2]:names(data)[462],key="artist",value="gg_score")
#merge in gaon chart and google trend
basic2<-left_join(basic,data,by=c("st_day","artist"))
dim(table(which(is.na(basic2$gg_score))))
View(basic2)
View(data)
View(basic)
#merge in gaon chart and google trend
basic2<-left_join(basic,data,by=c("st_day","artist"))
View(basic2)
save(basic, file="basic_dc_you_0512.RData")
#########################basic+youtube by 강동원
# data import -------------------------------------------------------------
data<-read_csv("~/Desktop/dsproject/data/youtube_merge_final.csv")
data$X1<-data$X1+1 # 0부터 시작되서 1더하기
names(data)[1]<-"id" #기본의 id만들기
names(data)
#중복제거
data<-data[!duplicated(data[,c("name","st_day","rank")]),]
table(data$rank)
save(basic, file="basic_dc_you_0512.RData")
# data import -------------------------------------------------------------
ggtrend<-read_csv("~/Desktop/dsproject/data/googletrend.csv")
data<-ggtrend
names(data)[1]<-"st_day"
names(data)[105]<-"X1"
data$Sondia_1<-NULL
data$최진호_1<-NULL
data$문성욱_1<-NULL
data$창모_1<-NULL
data$방탄소년단_1<-NULL
data$슬기_1<-NULL
names(data)
data[434]<-NULL
names(data)
data$st_day<-ymd(data$st_day)
dim(table(basic$st_day))
dim(data)
#structure change
data<-gather(data,names(data)[2]:names(data)[462],key="artist",value="gg_score")
#merge in gaon chart and google trend
basic$gg_score<-NULL
basic2<-left_join(basic,data,by=c("st_day","artist"))
View(basic2)
#gg_score없는것을 none파일로 만들어
none<-basic2[is.na(basic2$gg_score),]
none<-subset(none,select=c("id","st_day","artist"))
none$artist2<-gsub('&',',',none$artist)
artist3<-str_split_fixed(none$artist2, ",", 6)
artist3<-data.frame(artist3)
artist3$X1<-str_trim(artist3$X1,side="both")
artist3$X2<-str_trim(artist3$X2,side="both")
artist3$X3<-str_trim(artist3$X3,side="both")
artist3$X4<-str_trim(artist3$X4,side="both")
artist3$X5<-str_trim(artist3$X5,side="both")
artist3$X6<-str_trim(artist3$X6,side="both")
none<-bind_cols(none,artist3)
View(none)
artist3<-str_split_fixed(none$artist2, ",", 10)
artist3<-data.frame(artist3)
artist3$X1<-str_trim(artist3$X1,side="both")
artist3$X2<-str_trim(artist3$X2,side="both")
artist3$X3<-str_trim(artist3$X3,side="both")
artist3$X4<-str_trim(artist3$X4,side="both")
artist3$X5<-str_trim(artist3$X5,side="both")
artist3$X6<-str_trim(artist3$X6,side="both")
#gg_score없는것을 none파일로 만들어
none<-basic2[is.na(basic2$gg_score),]
none<-subset(none,select=c("id","st_day","artist"))
none$artist2<-gsub('&',',',none$artist)
artist3<-str_split_fixed(none$artist2, ",", 10)
artist3<-data.frame(artist3)
artist3$X1<-str_trim(artist3$X1,side="both")
artist3$X2<-str_trim(artist3$X2,side="both")
artist3$X3<-str_trim(artist3$X3,side="both")
artist3$X4<-str_trim(artist3$X4,side="both")
artist3$X5<-str_trim(artist3$X5,side="both")
artist3$X6<-str_trim(artist3$X6,side="both")
artist3$X7<-str_trim(artist3$X7,side="both")
artist3$X8<-str_trim(artist3$X8,side="both")
artist3$X9<-str_trim(artist3$X9,side="both")
artist3$X10<-str_trim(artist3$X10,side="both")
View(artist3)
none<-bind_cols(none,artist3)
# ggscore을 붙이면 됨.
none2<-none %>% gather(X1:X6,key="x",value="artist") %>% select(id,st_day,artist)
#data와 none을 머지
none3<-merge(none2,data,by=c("artist","st_day"),all = TRUE)
none3<-none3[is.na(none3$gg_score)==FALSE,] #ggscore 없는것 삭제
none3<-none3[is.na(none3$id)==FALSE,] #id 없는것 삭제
#가수 둘 이상의 점수 합계내기
a<-none3 %>% group_by(id) %>% summarise_at(vars(gg_score),list(name=mean))
names(a)[2]<-"gg_score"
new<-left_join(none,a,by="id") %>% select(id,gg_score)
View(new)
#merge in gaon chart and google trend
basic$gg_score<-NULL
basic2<-left_join(basic,data,by=c("st_day","artist"))
#gg_score없는것을 none파일로 만들어
none<-basic2[is.na(basic2$gg_score),]
none<-subset(none,select=c("id","st_day","artist"))
none$artist2<-gsub('&',',',none$artist)
artist3<-str_split_fixed(none$artist2, ",", 6)
artist3<-data.frame(artist3)
artist3$X1<-str_trim(artist3$X1,side="both")
artist3$X2<-str_trim(artist3$X2,side="both")
artist3$X3<-str_trim(artist3$X3,side="both")
artist3$X4<-str_trim(artist3$X4,side="both")
artist3$X5<-str_trim(artist3$X5,side="both")
artist3$X6<-str_trim(artist3$X6,side="both")
none<-bind_cols(none,artist3)
View(none)
# ggscore을 붙이면 됨.
none2<-none %>% gather(X1:X6,key="x",value="artist") %>% select(id,st_day,artist)
View(none2)
#data와 none을 머지
none3<-merge(none2,data,by=c("artist","st_day"),all = TRUE)
View(none3)
none3<-none3[is.na(none3$gg_score)==FALSE,] #ggscore 없는것 삭제
none3<-none3[is.na(none3$id)==FALSE,] #id 없는것 삭제
View(none3)
#가수 둘 이상의 점수 합계내기
a<-none3 %>% group_by(id) %>% summarise_at(vars(gg_score),list(name=mean))
View(a)
names(a)[2]<-"gg_score"
new<-left_join(none,a,by="id") %>% select(id,gg_score)
View(new)
#합계내기
basic3<-left_join(basic2,new,by="id") #가온차트데이터와 평균 낸 데이터 합치기
View(basic3)
basic3$gg_score<-ifelse(is.na(basic3$gg_score.x)==TRUE,basic3$gg_score.y,basic3$gg_score.x)
basic3$gg_score<-round(basic3$gg_score,digit=1) # 소수점
#정말 값이 없는 데이터 확인
a<-basic3[is.na(basic3$gg_score)==TRUE,]
View(a)
View(ggtrend)
View(data)
View(basic3)
View(data)
#현재(20-05-10일까지 gg trend에 2019.06.02일 이전의 데이터가 없어서 그 값은 null처리)
basic4<-mutate(gg_score=ifelse(is.na(gg_score)==TRUE,0,gg_score))
View(data)
View(basic3)
#현재(20-05-10일까지 gg trend에 2019.06.02일 이전의 데이터가 없어서 그 값은 null처리)
basic4<-basic3 %>% mutate(gg_score=ifelse(is.na(gg_score)==TRUE,0,gg_score))
View(basic4)
basic4$gg_score[is.na(basic3$gg_score)]=0 #값이 없는 데이터에 "0"입
View(basic4)
basic4$gg_score.x<-NULL
basic4$gg_score.y<-NULL
basic<-basic4
write.csv(basic,"data/basic_dc_you_gg_0511.csv")
save(basic, file="data/basic_dc_you_gg_0511.RData")
######################### Naver Trend by 오태환 ----------------------------------------------------------------------
# data import -------------------------------------------------------------
naver<-read_csv("~/Desktop/dsproject/data/navertrend크롤링.csv")
data<-naver
View(naver)
names(data)[1]<-"st_day"
View(naver)
View(data)
names(data)
data$st_day<-ymd(data$st_day)
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
View(data)
#structure change
data<-gather(data,names(data)[2]:names(data)[330],key="artist",value="nv_score")
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
######################### Naver Trend by 오태환 ----------------------------------------------------------------------
# data import -------------------------------------------------------------
naver<-read_csv("~/Desktop/dsproject/data/navertrend크롤링.csv")
data<-naver
names(data)[1]<-"st_day"
names(data)
data$st_day<-ymd(data$st_day)
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
View(data)
View(basic)
#structure change
data<-gather(data,names(data)[2]:names(data)[330],key="artist",value="nv_score")
#merge in basic and naver trend
basic2<-left_join(basic,data,by=c("st_day","artist"))#기본+네이버
View(basic2)
######################### Naver Trend by 오태환 ----------------------------------------------------------------------
# data import -------------------------------------------------------------
naver<-read_csv("~/Desktop/dsproject/data/navertrend크롤링.csv")
data<-naver
names(data)[1]<-"st_day"
names(data)
data$st_day<-ymd(data$st_day)
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
#structure change
data<-gather(data,names(data)[2]:names(data)[330],key="artist",value="nv_score")
View(data)
######################### Naver Trend by 오태환 ----------------------------------------------------------------------
# data import -------------------------------------------------------------
naver<-read_csv("~/Desktop/dsproject/data/navertrend크롤링.csv")
data<-naver
names(data)[1]<-"st_day"
names(data)
data$st_day<-ymd(data$st_day)
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
#structure change
dim(data)
data<-gather(data,names(data)[2]:names(data)[476],key="artist",value="nv_score")
#merge in basic and naver trend
basic2<-left_join(basic,data,by=c("st_day","artist"))#기본+네이버
View(basic2)
######################### Naver Trend by 오태환 ----------------------------------------------------------------------
# data import -------------------------------------------------------------
naver<-read_csv("~/Desktop/dsproject/data/navertrend크롤링.csv")
data<-naver
names(data)[1]<-"st_day"
names(data)
data$st_day<-ymd(data$st_day)
#basic과 navertrend의 날짜 맞추기
data$st_day<-data$st_day-1
#structure change
dim(data)
data<-gather(data,names(data)[2]:names(data)[476],key="artist",value="nv_score")
#merge in basic and naver trend
basic$nv_score<-NULL
basic2<-left_join(basic,data,by=c("st_day","artist"))#기본+네이버
dim(table(which(is.na(basic2$gg_score))))
#nv_score없는것을 none파일로 만들어
none<-basic2[is.na(basic2$nv_score),]
none<-subset(none,select=c("id","st_day","artist"))
none$artist2<-gsub('&',',',none$artist)
artist3<-str_split_fixed(none$artist2, ",", 6)
artist3<-data.frame(artist3)
artist3$X1<-str_trim(artist3$X1,side="both")
artist3$X2<-str_trim(artist3$X2,side="both")
artist3$X3<-str_trim(artist3$X3,side="both")
artist3$X4<-str_trim(artist3$X4,side="both")
artist3$X5<-str_trim(artist3$X5,side="both")
artist3$X6<-str_trim(artist3$X6,side="both")
none<-bind_cols(none,artist3)
#여기부터 다시
# nv_core을 붙이면 됨.
none2<-none %>% gather(X1:X6,key="x",value="artist") %>% select(id,st_day,artist)
#data와 none을 머지
none3<-merge(none2,data,by=c("artist","st_day"),all = TRUE)
none3<-none3[is.na(none3$nv_score)==FALSE,] #ggscore 없는것 삭제
none3<-none3[is.na(none3$id)==FALSE,] #id 없는것 삭제
#가수 둘 이상의 점수 합계내기
a<-none3 %>% group_by(id) %>% summarise_at(vars(nv_score),list(name=mean))
names(a)[2]<-"nv_score"
new<-left_join(none,a,by="id") %>% select(id,nv_score)
#합계내기
basic3<-left_join(basic2,new,by="id") #가온차트데이터와 평균 낸 데이터 합치기
basic3$nv_score<-ifelse(is.na(basic3$nv_score.x)==TRUE,basic3$nv_score.y,basic3$nv_score.x)
basic3$nv_score<-round(basic3$nv_score,digit=1) # 소수점
#정말 값이 없는 데이터 확인
a<-basic3[is.na(basic3$gg_score)==TRUE,]
#정말 값이 없는 데이터 확인
a<-basic3[is.na(basic3$nv_score)==TRUE,]
View(a)
#현재(20-05-10일까지 naver trend에 2019.05.26일 이전의 데이터와, 2019.12.29일 이후의 값은 없어서, 그 값은 null처리)
basic4$nv_score[is.na(basic4$nv_score)]=0 #값이 없는 데이터에 "0"입
View(basic4)
basic4$nv_score.x<-NULL
basic4$nv_score.y<-NULL
View(basic4)
is.na(basic)
is.na(basic4)
table(is.na(basic4))
which(table(is.na(basic4)))
which(is.na(basic4))
View(basic4)
basic4[which(is.na(basic4)),]
a<-basic4[which(is.na(basic4)),]
View(a)
write.csv(basic,"data/basic_dc_you_gg_nv_0511.csv")
save(basic, file="data/basic_dc_you_gg_nv_0511.RData")
final<-basic4
final<-basic4
write.csv(final0511,"data/basic_dc_you_gg_nv_0511.csv")
save(final0511, file="data/basic_dc_you_gg_nv_0511.RData")
final0511<-basic4
write.csv(final0511,"data/basic_dc_you_gg_nv_0511.csv")
save(final0511, file="data/basic_dc_you_gg_nv_0511.RData")
View(final0511)
# library -----------------------------------------------------------------
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(forcats)
library(car)
library(ggplot2)
View(basic)
